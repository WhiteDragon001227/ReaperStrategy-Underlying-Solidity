{
  "contractName": "IBeetVault",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAuthorizer",
          "name": "newAuthorizer",
          "type": "address"
        }
      ],
      "name": "AuthorizerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExternalBalanceTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "InternalBalanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PausedStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "deltas",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "protocolFeeAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "PoolBalanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "cashDelta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "managedDelta",
          "type": "int256"
        }
      ],
      "name": "PoolBalanceManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBeetVault.PoolSpecialization",
          "name": "specialization",
          "type": "uint8"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "RelayerApprovalChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "TokensDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetManagers",
          "type": "address[]"
        }
      ],
      "name": "TokensRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPausedState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pauseWindowEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizer",
      "outputs": [
        {
          "internalType": "contract IAuthorizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthorizer",
          "name": "newAuthorizer",
          "type": "address"
        }
      ],
      "name": "setAuthorizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "hasApprovedRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setRelayerApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getInternalBalance",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IBeetVault.UserBalanceOpKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IAsset",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct IBeetVault.UserBalanceOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "manageUserBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBeetVault.PoolSpecialization",
          "name": "specialization",
          "type": "uint8"
        }
      ],
      "name": "registerPool",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IBeetVault.PoolSpecialization",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "assetManagers",
          "type": "address[]"
        }
      ],
      "name": "registerTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "deregisterTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPoolTokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetManager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IAsset[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxAmountsIn",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IBeetVault.JoinPoolRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IAsset[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "minAmountsOut",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IBeetVault.ExitPoolRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IBeetVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IAsset",
              "name": "assetIn",
              "type": "address"
            },
            {
              "internalType": "contract IAsset",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBeetVault.SingleSwap",
          "name": "singleSwap",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IBeetVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBeetVault.SwapKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBeetVault.BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IAsset[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IBeetVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "int256[]",
          "name": "limits",
          "type": "int256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "batchSwap",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBeetVault.SwapKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBeetVault.BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IAsset[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IBeetVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        }
      ],
      "name": "queryBatchSwap",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "assetDeltas",
          "type": "int256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IBeetVault.PoolBalanceOpKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20Upgradeable",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBeetVault.PoolBalanceOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "managePoolBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBeetVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IBeetVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeetVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IBeetVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IBeetVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeetVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IBeetVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IBeetVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBeetVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeetVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBeetVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IBeetVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeetVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/interfaces/IBeetVault.sol\":\"IBeetVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcec0617473fa22a0866d7daf25bf4d664a62902e49c4a158aef54c1e4348e8a\",\"dweb:/ipfs/QmPQetTKnLJBAQQrLKUWGVZwfp3VGmBhnqqJvmJTycM1jR\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"project:/src/contracts/interfaces/IAsset.sol\":{\"keccak256\":\"0xdde674eb0afc46f7566aebe2f2140e96e32e7ae0de140be127fafe84f6a5578a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f11ddbb9f374d39fb52c3a6dd54dd365174635ea04ddd13424f77e160b4c2e01\",\"dweb:/ipfs/QmSMAEZKwDVRSo28TDYwzfQgwaYSyLGtdvZqMXovyUseUF\"]},\"project:/src/contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x18b2ef1795724d4c75e95680715f9ed92157c8d3c9f8ecf400cb4746d0d17371\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://681452ced4351dd052198513e5692b1d2e9037721a438d8acebf08fd2d294969\",\"dweb:/ipfs/QmPZXEbYhP2QqQ2yy3T5q8f8Lqn1FbwKZ7BnqqVvTma5wj\"]},\"project:/src/contracts/interfaces/IBeetVault.sol\":{\"keccak256\":\"0x8a2283857123cfed0373159e609517a9892784a0e760c5c6b7174d802b42ccca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e99eec2685a382de0116ac99ff6c89b8df6c6d366ed68978c69e5470ec5194f\",\"dweb:/ipfs/QmcQox19NQAaRmHWta64A6Kk2BzsbT76rNb8riAvweVKyb\"]},\"project:/src/contracts/interfaces/ISignaturesValidator.sol\":{\"keccak256\":\"0x04d0cb12f9fd70c75798a02e4a795eae4b73957c0ac6b136ff3a9a3dd20cc2f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd293ce03bdd5f9dc6c85d804914dc94c6eca4890d1d4ad4c2ffe8c7aa251358\",\"dweb:/ipfs/QmeQXf1zkjVoh5A5qoAQh4EjVREYjpVCC1oGuZ7eQD5DrC\"]},\"project:/src/contracts/interfaces/ITemporarilyPausable.sol\":{\"keccak256\":\"0xe5858546d5c14ed9233b6aa65bd6f4ef59a5ef1af8bf240a217d868b8efa50aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973b5c7216403b766b02f7cc5828f2b9c606479793a749c6aecc2838d7224133\",\"dweb:/ipfs/Qmac8ULyaAEbixoSz31HNVSUVZs45zraeu3h43H4p37Jm4\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"./ISignaturesValidator.sol\";\r\nimport \"./ITemporarilyPausable.sol\";\r\nimport \"./IAuthorizer.sol\";\r\nimport \"./IAsset.sol\";\r\n\r\ninterface IBeetVault is ISignaturesValidator, ITemporarilyPausable {\r\n    // Generalities about the Vault:\r\n    //\r\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\r\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\r\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\r\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\r\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\r\n    //\r\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\r\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\r\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\r\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\r\n    //\r\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\r\n\r\n    // Authorizer\r\n    //\r\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\r\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\r\n    // can perform a given action.\r\n\r\n    /**\r\n     * @dev Returns the Vault's Authorizer.\r\n     */\r\n    function getAuthorizer() external view returns (IAuthorizer);\r\n\r\n    /**\r\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\r\n     *\r\n     * Emits an `AuthorizerChanged` event.\r\n     */\r\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\r\n\r\n    /**\r\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\r\n     */\r\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\r\n\r\n    // Relayers\r\n    //\r\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\r\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\r\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\r\n    // this power, two things must occur:\r\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\r\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\r\n    //    functions.\r\n    //  - Each user must approve the relayer to act on their behalf.\r\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\r\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\r\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\r\n\r\n    /**\r\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\r\n     */\r\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\r\n     *\r\n     * Emits a `RelayerApprovalChanged` event.\r\n     */\r\n    function setRelayerApproval(\r\n        address sender,\r\n        address relayer,\r\n        bool approved\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\r\n     */\r\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\r\n\r\n    // Internal Balance\r\n    //\r\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n    //\r\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n    // operations of different kinds, with different senders and recipients, at once.\r\n\r\n    /**\r\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n     */\r\n    function getInternalBalance(address user, IERC20Upgradeable[] memory tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n     * it lets integrators reuse a user's Vault allowance.\r\n     *\r\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n     */\r\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\r\n\r\n    /**\r\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n    struct UserBalanceOp {\r\n        UserBalanceOpKind kind;\r\n        IAsset asset;\r\n        uint256 amount;\r\n        address sender;\r\n        address payable recipient;\r\n    }\r\n\r\n    // There are four possible operations in `manageUserBalance`:\r\n    //\r\n    // - DEPOSIT_INTERNAL\r\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n    // relevant for relayers).\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - WITHDRAW_INTERNAL\r\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n    // it to the recipient as ETH.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_INTERNAL\r\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_EXTERNAL\r\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n    // relayers, as it lets them reuse a user's Vault allowance.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `ExternalBalanceTransfer` event.\r\n\r\n    enum UserBalanceOpKind {\r\n        DEPOSIT_INTERNAL,\r\n        WITHDRAW_INTERNAL,\r\n        TRANSFER_INTERNAL,\r\n        TRANSFER_EXTERNAL\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n     * interacting with Pools using Internal Balance.\r\n     *\r\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n     * address.\r\n     */\r\n    event InternalBalanceChanged(address indexed user, IERC20Upgradeable indexed token, int256 delta);\r\n\r\n    /**\r\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n     */\r\n    event ExternalBalanceTransfer(\r\n        IERC20Upgradeable indexed token,\r\n        address indexed sender,\r\n        address recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    // Pools\r\n    //\r\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n    // functionality:\r\n    //\r\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n    // which increase with the number of registered tokens.\r\n    //\r\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n    // independent of the number of registered tokens.\r\n    //\r\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n    enum PoolSpecialization {\r\n        GENERAL,\r\n        MINIMAL_SWAP_INFO,\r\n        TWO_TOKEN\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n     * changed.\r\n     *\r\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n     *\r\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n     * multiple Pools may share the same contract.\r\n     *\r\n     * Emits a `PoolRegistered` event.\r\n     */\r\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n     */\r\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\r\n\r\n    /**\r\n     * @dev Returns a Pool's contract address and specialization setting.\r\n     */\r\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n    /**\r\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n     * exit by receiving registered tokens, and can only swap registered tokens.\r\n     *\r\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n     * ascending order.\r\n     *\r\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n     * Asset Manager should not be made lightly.\r\n     *\r\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n     * different Asset Manager.\r\n     *\r\n     * Emits a `TokensRegistered` event.\r\n     */\r\n    function registerTokens(\r\n        bytes32 poolId,\r\n        IERC20Upgradeable[] memory tokens,\r\n        address[] memory assetManagers\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n     */\r\n    event TokensRegistered(bytes32 indexed poolId, IERC20Upgradeable[] tokens, address[] assetManagers);\r\n\r\n    /**\r\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n     * must be deregistered in the same `deregisterTokens` call.\r\n     *\r\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n     *\r\n     * Emits a `TokensDeregistered` event.\r\n     */\r\n    function deregisterTokens(bytes32 poolId, IERC20Upgradeable[] memory tokens) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n     */\r\n    event TokensDeregistered(bytes32 indexed poolId, IERC20Upgradeable[] tokens);\r\n\r\n    /**\r\n     * @dev Returns detailed information for a Pool's registered token.\r\n     *\r\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n     * equals the sum of `cash` and `managed`.\r\n     *\r\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n     * `managed` or `total` balance to be greater than 2^112 - 1.\r\n     *\r\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n     * change for this purpose, and will update `lastChangeBlock`.\r\n     *\r\n     * `assetManager` is the Pool's token Asset Manager.\r\n     */\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20Upgradeable token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 cash,\r\n            uint256 managed,\r\n            uint256 lastChangeBlock,\r\n            address assetManager\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n     * the tokens' `balances` changed.\r\n     *\r\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n     *\r\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n     * order as passed to `registerTokens`.\r\n     *\r\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n     * instead.\r\n     */\r\n    function getPoolTokens(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (\r\n            IERC20Upgradeable[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock\r\n        );\r\n\r\n    /**\r\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n     * `getPoolTokenInfo`).\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n     * it just enforces these minimums.\r\n     *\r\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n     *\r\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n     * do so will trigger a revert.\r\n     *\r\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n     * `tokens` array. This array must match the Pool's registered tokens.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n     * passed directly to the Pool's contract.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external;\r\n\r\n    struct ExitPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n     */\r\n    event PoolBalanceChanged(\r\n        bytes32 indexed poolId,\r\n        address indexed liquidityProvider,\r\n        IERC20Upgradeable[] tokens,\r\n        int256[] deltas,\r\n        uint256[] protocolFeeAmounts\r\n    );\r\n\r\n    enum PoolBalanceChangeKind {\r\n        JOIN,\r\n        EXIT\r\n    }\r\n\r\n    // Swaps\r\n    //\r\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n    //\r\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n    // individual swaps.\r\n    //\r\n    // There are two swap kinds:\r\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n    //\r\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n    // the final intended token.\r\n    //\r\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n    // much less gas than they would otherwise.\r\n    //\r\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n    // updating the Pool's internal accounting).\r\n    //\r\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n    //\r\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n    //\r\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n    //\r\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n    enum SwapKind {\r\n        GIVEN_IN,\r\n        GIVEN_OUT\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    /**\r\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n     */\r\n    event Swap(\r\n        bytes32 indexed poolId,\r\n        IERC20Upgradeable indexed tokenIn,\r\n        IERC20Upgradeable indexed tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    /**\r\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n     *\r\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n     * receives are the same that an equivalent `batchSwap` call would receive.\r\n     *\r\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n     * approve them for the Vault, or even know a user's address.\r\n     *\r\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n     * eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n\r\n    // Asset Management\r\n    //\r\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\r\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\r\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\r\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\r\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\r\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\r\n    //\r\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\r\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\r\n    //\r\n    // This concept is unrelated to the IAsset interface.\r\n\r\n    /**\r\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\r\n     *\r\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\r\n     * operations of different kinds, with different Pools and tokens, at once.\r\n     *\r\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\r\n     */\r\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\r\n\r\n    struct PoolBalanceOp {\r\n        PoolBalanceOpKind kind;\r\n        bytes32 poolId;\r\n        IERC20Upgradeable token;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\r\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\r\n     */\r\n    enum PoolBalanceOpKind {\r\n        WITHDRAW,\r\n        DEPOSIT,\r\n        UPDATE\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\r\n     */\r\n    event PoolBalanceManaged(\r\n        bytes32 indexed poolId,\r\n        address indexed assetManager,\r\n        IERC20Upgradeable indexed token,\r\n        int256 cashDelta,\r\n        int256 managedDelta\r\n    );\r\n\r\n    // Protocol Fees\r\n    //\r\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\r\n    // permissioned accounts.\r\n    //\r\n    // There are two kinds of protocol fees:\r\n    //\r\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\r\n    //\r\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\r\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\r\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\r\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\r\n    // exiting a Pool in debt without first paying their share.\r\n\r\n    /**\r\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\r\n     * error in some part of the system.\r\n     *\r\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\r\n     *\r\n     * While the contract is paused, the following features are disabled:\r\n     * - depositing and transferring internal balance\r\n     * - transferring external balance (using the Vault's allowance)\r\n     * - swaps\r\n     * - joining Pools\r\n     * - Asset Manager interactions\r\n     *\r\n     * Internal Balance can still be withdrawn, and Pools exited.\r\n     */\r\n    function setPaused(bool paused) external;\r\n\r\n    /**\r\n     * @dev Returns the Vault's WETH instance.\r\n     */\r\n}",
  "sourcePath": "E:\\2.Dev\\2\\fantohm\\2.Progress\\3.DefiYieldFarming\\marketplace\\src\\contracts\\interfaces\\IBeetVault.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/interfaces/IBeetVault.sol",
    "exportedSymbols": {
      "AddressUpgradeable": [
        2541
      ],
      "ContextUpgradeable": [
        2583
      ],
      "ERC20Upgradeable": [
        1971
      ],
      "IAsset": [
        5644
      ],
      "IAuthorizer": [
        5659
      ],
      "IBeetVault": [
        6201
      ],
      "IERC20MetadataUpgradeable": [
        2074
      ],
      "IERC20Upgradeable": [
        2049
      ],
      "ISignaturesValidator": [
        6534
      ],
      "ITemporarilyPausable": [
        6590
      ],
      "Initializable": [
        1113
      ]
    },
    "id": 6202,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5741,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:29"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
        "id": 5742,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6202,
        "sourceUnit": 1972,
        "src": "62:78:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/src/contracts/interfaces/ISignaturesValidator.sol",
        "file": "./ISignaturesValidator.sol",
        "id": 5743,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6202,
        "sourceUnit": 6535,
        "src": "142:36:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/src/contracts/interfaces/ITemporarilyPausable.sol",
        "file": "./ITemporarilyPausable.sol",
        "id": 5744,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6202,
        "sourceUnit": 6591,
        "src": "180:36:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/src/contracts/interfaces/IAuthorizer.sol",
        "file": "./IAuthorizer.sol",
        "id": 5745,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6202,
        "sourceUnit": 5660,
        "src": "218:27:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/src/contracts/interfaces/IAsset.sol",
        "file": "./IAsset.sol",
        "id": 5746,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6202,
        "sourceUnit": 5645,
        "src": "247:22:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5747,
              "name": "ISignaturesValidator",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6534,
              "src": "297:20:29"
            },
            "id": 5748,
            "nodeType": "InheritanceSpecifier",
            "src": "297:20:29"
          },
          {
            "baseName": {
              "id": 5749,
              "name": "ITemporarilyPausable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6590,
              "src": "319:20:29"
            },
            "id": 5750,
            "nodeType": "InheritanceSpecifier",
            "src": "319:20:29"
          }
        ],
        "canonicalName": "IBeetVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 6201,
        "linearizedBaseContracts": [
          6201,
          6590,
          6534
        ],
        "name": "IBeetVault",
        "nameLocation": "283:10:29",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5751,
              "nodeType": "StructuredDocumentation",
              "src": "1859:57:29",
              "text": " @dev Returns the Vault's Authorizer."
            },
            "functionSelector": "aaabadc5",
            "id": 5757,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAuthorizer",
            "nameLocation": "1931:13:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5752,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1944:2:29"
            },
            "returnParameters": {
              "id": 5756,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5755,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5757,
                  "src": "1970:11:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAuthorizer_$5659",
                    "typeString": "contract IAuthorizer"
                  },
                  "typeName": {
                    "id": 5754,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5753,
                      "name": "IAuthorizer",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5659,
                      "src": "1970:11:29"
                    },
                    "referencedDeclaration": 5659,
                    "src": "1970:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAuthorizer_$5659",
                      "typeString": "contract IAuthorizer"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1969:13:29"
            },
            "scope": 6201,
            "src": "1922:61:29",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5758,
              "nodeType": "StructuredDocumentation",
              "src": "1991:179:29",
              "text": " @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."
            },
            "functionSelector": "058a628f",
            "id": 5764,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAuthorizer",
            "nameLocation": "2185:13:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5762,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5761,
                  "mutability": "mutable",
                  "name": "newAuthorizer",
                  "nameLocation": "2211:13:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5764,
                  "src": "2199:25:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAuthorizer_$5659",
                    "typeString": "contract IAuthorizer"
                  },
                  "typeName": {
                    "id": 5760,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5759,
                      "name": "IAuthorizer",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5659,
                      "src": "2199:11:29"
                    },
                    "referencedDeclaration": 5659,
                    "src": "2199:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAuthorizer_$5659",
                      "typeString": "contract IAuthorizer"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2198:27:29"
            },
            "returnParameters": {
              "id": 5763,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2234:0:29"
            },
            "scope": 6201,
            "src": "2176:59:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5765,
              "nodeType": "StructuredDocumentation",
              "src": "2243:82:29",
              "text": " @dev Emitted when a new authorizer is set by `setAuthorizer`."
            },
            "id": 5770,
            "name": "AuthorizerChanged",
            "nameLocation": "2337:17:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5768,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "newAuthorizer",
                  "nameLocation": "2375:13:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5770,
                  "src": "2355:33:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAuthorizer_$5659",
                    "typeString": "contract IAuthorizer"
                  },
                  "typeName": {
                    "id": 5767,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5766,
                      "name": "IAuthorizer",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5659,
                      "src": "2355:11:29"
                    },
                    "referencedDeclaration": 5659,
                    "src": "2355:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAuthorizer_$5659",
                      "typeString": "contract IAuthorizer"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2354:35:29"
            },
            "src": "2331:59:29"
          },
          {
            "documentation": {
              "id": 5771,
              "nodeType": "StructuredDocumentation",
              "src": "3502:101:29",
              "text": " @dev Returns true if `user` has approved `relayer` to act as a relayer for them."
            },
            "functionSelector": "fec90d72",
            "id": 5780,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasApprovedRelayer",
            "nameLocation": "3618:18:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5773,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "3645:4:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5780,
                  "src": "3637:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5772,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3637:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5775,
                  "mutability": "mutable",
                  "name": "relayer",
                  "nameLocation": "3659:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5780,
                  "src": "3651:15:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5774,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3651:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3636:31:29"
            },
            "returnParameters": {
              "id": 5779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5778,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5780,
                  "src": "3691:4:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5777,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3691:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3690:6:29"
            },
            "scope": 6201,
            "src": "3609:88:29",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5781,
              "nodeType": "StructuredDocumentation",
              "src": "3705:182:29",
              "text": " @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."
            },
            "functionSelector": "fa6e671d",
            "id": 5790,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRelayerApproval",
            "nameLocation": "3902:18:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5788,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5783,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "3939:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5790,
                  "src": "3931:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5782,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3931:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5785,
                  "mutability": "mutable",
                  "name": "relayer",
                  "nameLocation": "3964:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5790,
                  "src": "3956:15:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5784,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3956:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5787,
                  "mutability": "mutable",
                  "name": "approved",
                  "nameLocation": "3987:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5790,
                  "src": "3982:13:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5786,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3982:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3920:82:29"
            },
            "returnParameters": {
              "id": 5789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4011:0:29"
            },
            "scope": 6201,
            "src": "3893:119:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5791,
              "nodeType": "StructuredDocumentation",
              "src": "4020:106:29",
              "text": " @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
            },
            "id": 5799,
            "name": "RelayerApprovalChanged",
            "nameLocation": "4138:22:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5798,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5793,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "relayer",
                  "nameLocation": "4177:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5799,
                  "src": "4161:23:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5792,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4161:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5795,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4202:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5799,
                  "src": "4186:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5794,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4186:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5797,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "approved",
                  "nameLocation": "4215:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5799,
                  "src": "4210:13:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5796,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4210:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4160:64:29"
            },
            "src": "4132:93:29"
          },
          {
            "documentation": {
              "id": 5800,
              "nodeType": "StructuredDocumentation",
              "src": "4945:80:29",
              "text": " @dev Returns `user`'s Internal Balance for a set of tokens."
            },
            "functionSelector": "0f5a6efa",
            "id": 5812,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInternalBalance",
            "nameLocation": "5040:18:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5802,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "5067:4:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5812,
                  "src": "5059:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5801,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5059:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5806,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "5100:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5812,
                  "src": "5073:33:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5804,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5803,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "5073:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "5073:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 5805,
                    "nodeType": "ArrayTypeName",
                    "src": "5073:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5058:49:29"
            },
            "returnParameters": {
              "id": 5811,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5810,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5812,
                  "src": "5158:16:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5808,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5158:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 5809,
                    "nodeType": "ArrayTypeName",
                    "src": "5158:9:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5157:18:29"
            },
            "scope": 6201,
            "src": "5031:145:29",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5813,
              "nodeType": "StructuredDocumentation",
              "src": "5184:422:29",
              "text": " @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
            },
            "functionSelector": "0e8e3e84",
            "id": 5820,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "manageUserBalance",
            "nameLocation": "5621:17:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5817,
                  "mutability": "mutable",
                  "name": "ops",
                  "nameLocation": "5662:3:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5820,
                  "src": "5639:26:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$5833_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IBeetVault.UserBalanceOp[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5815,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5814,
                        "name": "UserBalanceOp",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5833,
                        "src": "5639:13:29"
                      },
                      "referencedDeclaration": 5833,
                      "src": "5639:13:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserBalanceOp_$5833_storage_ptr",
                        "typeString": "struct IBeetVault.UserBalanceOp"
                      }
                    },
                    "id": 5816,
                    "nodeType": "ArrayTypeName",
                    "src": "5639:15:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$5833_storage_$dyn_storage_ptr",
                      "typeString": "struct IBeetVault.UserBalanceOp[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5638:28:29"
            },
            "returnParameters": {
              "id": 5819,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5683:0:29"
            },
            "scope": 6201,
            "src": "5612:72:29",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IBeetVault.UserBalanceOp",
            "id": 5833,
            "members": [
              {
                "constant": false,
                "id": 5823,
                "mutability": "mutable",
                "name": "kind",
                "nameLocation": "5926:4:29",
                "nodeType": "VariableDeclaration",
                "scope": 5833,
                "src": "5908:22:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_UserBalanceOpKind_$5838",
                  "typeString": "enum IBeetVault.UserBalanceOpKind"
                },
                "typeName": {
                  "id": 5822,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 5821,
                    "name": "UserBalanceOpKind",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 5838,
                    "src": "5908:17:29"
                  },
                  "referencedDeclaration": 5838,
                  "src": "5908:17:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_UserBalanceOpKind_$5838",
                    "typeString": "enum IBeetVault.UserBalanceOpKind"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5826,
                "mutability": "mutable",
                "name": "asset",
                "nameLocation": "5948:5:29",
                "nodeType": "VariableDeclaration",
                "scope": 5833,
                "src": "5941:12:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IAsset_$5644",
                  "typeString": "contract IAsset"
                },
                "typeName": {
                  "id": 5825,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 5824,
                    "name": "IAsset",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 5644,
                    "src": "5941:6:29"
                  },
                  "referencedDeclaration": 5644,
                  "src": "5941:6:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAsset_$5644",
                    "typeString": "contract IAsset"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5828,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "5972:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 5833,
                "src": "5964:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5827,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5964:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5830,
                "mutability": "mutable",
                "name": "sender",
                "nameLocation": "5997:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 5833,
                "src": "5989:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 5829,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "5989:7:29",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5832,
                "mutability": "mutable",
                "name": "recipient",
                "nameLocation": "6030:9:29",
                "nodeType": "VariableDeclaration",
                "scope": 5833,
                "src": "6014:25:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                },
                "typeName": {
                  "id": 5831,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "6014:15:29",
                  "stateMutability": "payable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "UserBalanceOp",
            "nameLocation": "5883:13:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "5876:171:29",
            "visibility": "public"
          },
          {
            "canonicalName": "IBeetVault.UserBalanceOpKind",
            "id": 5838,
            "members": [
              {
                "id": 5834,
                "name": "DEPOSIT_INTERNAL",
                "nameLocation": "7734:16:29",
                "nodeType": "EnumValue",
                "src": "7734:16:29"
              },
              {
                "id": 5835,
                "name": "WITHDRAW_INTERNAL",
                "nameLocation": "7761:17:29",
                "nodeType": "EnumValue",
                "src": "7761:17:29"
              },
              {
                "id": 5836,
                "name": "TRANSFER_INTERNAL",
                "nameLocation": "7789:17:29",
                "nodeType": "EnumValue",
                "src": "7789:17:29"
              },
              {
                "id": 5837,
                "name": "TRANSFER_EXTERNAL",
                "nameLocation": "7817:17:29",
                "nodeType": "EnumValue",
                "src": "7817:17:29"
              }
            ],
            "name": "UserBalanceOpKind",
            "nameLocation": "7705:17:29",
            "nodeType": "EnumDefinition",
            "src": "7700:141:29"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5839,
              "nodeType": "StructuredDocumentation",
              "src": "7849:323:29",
              "text": " @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."
            },
            "id": 5848,
            "name": "InternalBalanceChanged",
            "nameLocation": "8184:22:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5847,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5841,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "8223:4:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5848,
                  "src": "8207:20:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5840,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8207:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5844,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "8255:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5848,
                  "src": "8229:31:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "id": 5843,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5842,
                      "name": "IERC20Upgradeable",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2049,
                      "src": "8229:17:29"
                    },
                    "referencedDeclaration": 2049,
                    "src": "8229:17:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5846,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "delta",
                  "nameLocation": "8269:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5848,
                  "src": "8262:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 5845,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8262:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8206:69:29"
            },
            "src": "8178:98:29"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5849,
              "nodeType": "StructuredDocumentation",
              "src": "8284:133:29",
              "text": " @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
            },
            "id": 5860,
            "name": "ExternalBalanceTransfer",
            "nameLocation": "8429:23:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5852,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "8489:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5860,
                  "src": "8463:31:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "id": 5851,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5850,
                      "name": "IERC20Upgradeable",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2049,
                      "src": "8463:17:29"
                    },
                    "referencedDeclaration": 2049,
                    "src": "8463:17:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5854,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "8521:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5860,
                  "src": "8505:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5853,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8505:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5856,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "8546:9:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5860,
                  "src": "8538:17:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5855,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8538:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5858,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8574:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5860,
                  "src": "8566:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5857,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8566:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8452:135:29"
            },
            "src": "8423:165:29"
          },
          {
            "canonicalName": "IBeetVault.PoolSpecialization",
            "id": 5864,
            "members": [
              {
                "id": 5861,
                "name": "GENERAL",
                "nameLocation": "9722:7:29",
                "nodeType": "EnumValue",
                "src": "9722:7:29"
              },
              {
                "id": 5862,
                "name": "MINIMAL_SWAP_INFO",
                "nameLocation": "9740:17:29",
                "nodeType": "EnumValue",
                "src": "9740:17:29"
              },
              {
                "id": 5863,
                "name": "TWO_TOKEN",
                "nameLocation": "9768:9:29",
                "nodeType": "EnumValue",
                "src": "9768:9:29"
              }
            ],
            "name": "PoolSpecialization",
            "nameLocation": "9692:18:29",
            "nodeType": "EnumDefinition",
            "src": "9687:97:29"
          },
          {
            "documentation": {
              "id": 5865,
              "nodeType": "StructuredDocumentation",
              "src": "9792:714:29",
              "text": " @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."
            },
            "functionSelector": "09b2760f",
            "id": 5873,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerPool",
            "nameLocation": "10521:12:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5869,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5868,
                  "mutability": "mutable",
                  "name": "specialization",
                  "nameLocation": "10553:14:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5873,
                  "src": "10534:33:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PoolSpecialization_$5864",
                    "typeString": "enum IBeetVault.PoolSpecialization"
                  },
                  "typeName": {
                    "id": 5867,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5866,
                      "name": "PoolSpecialization",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5864,
                      "src": "10534:18:29"
                    },
                    "referencedDeclaration": 5864,
                    "src": "10534:18:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PoolSpecialization_$5864",
                      "typeString": "enum IBeetVault.PoolSpecialization"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10533:35:29"
            },
            "returnParameters": {
              "id": 5872,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5871,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5873,
                  "src": "10587:7:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5870,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "10587:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10586:9:29"
            },
            "scope": 6201,
            "src": "10512:84:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5874,
              "nodeType": "StructuredDocumentation",
              "src": "10604:86:29",
              "text": " @dev Emitted when a Pool is registered by calling `registerPool`."
            },
            "id": 5883,
            "name": "PoolRegistered",
            "nameLocation": "10702:14:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5882,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5876,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "10733:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5883,
                  "src": "10717:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5875,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "10717:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5878,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolAddress",
                  "nameLocation": "10757:11:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5883,
                  "src": "10741:27:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5877,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10741:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5881,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "specialization",
                  "nameLocation": "10789:14:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5883,
                  "src": "10770:33:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PoolSpecialization_$5864",
                    "typeString": "enum IBeetVault.PoolSpecialization"
                  },
                  "typeName": {
                    "id": 5880,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5879,
                      "name": "PoolSpecialization",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5864,
                      "src": "10770:18:29"
                    },
                    "referencedDeclaration": 5864,
                    "src": "10770:18:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PoolSpecialization_$5864",
                      "typeString": "enum IBeetVault.PoolSpecialization"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10716:88:29"
            },
            "src": "10696:109:29"
          },
          {
            "documentation": {
              "id": 5884,
              "nodeType": "StructuredDocumentation",
              "src": "10813:87:29",
              "text": " @dev Returns a Pool's contract address and specialization setting."
            },
            "functionSelector": "f6c00927",
            "id": 5894,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPool",
            "nameLocation": "10915:7:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5886,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "10931:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5894,
                  "src": "10923:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5885,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "10923:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10922:16:29"
            },
            "returnParameters": {
              "id": 5893,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5889,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5894,
                  "src": "10962:7:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5888,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10962:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5892,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5894,
                  "src": "10971:18:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PoolSpecialization_$5864",
                    "typeString": "enum IBeetVault.PoolSpecialization"
                  },
                  "typeName": {
                    "id": 5891,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5890,
                      "name": "PoolSpecialization",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5864,
                      "src": "10971:18:29"
                    },
                    "referencedDeclaration": 5864,
                    "src": "10971:18:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PoolSpecialization_$5864",
                      "typeString": "enum IBeetVault.PoolSpecialization"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10961:29:29"
            },
            "scope": 6201,
            "src": "10906:85:29",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5895,
              "nodeType": "StructuredDocumentation",
              "src": "10999:1443:29",
              "text": " @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."
            },
            "functionSelector": "66a9c7d2",
            "id": 5907,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerTokens",
            "nameLocation": "12457:14:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5905,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5897,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "12490:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5907,
                  "src": "12482:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5896,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12482:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5901,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "12534:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5907,
                  "src": "12507:33:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5899,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5898,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "12507:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "12507:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 5900,
                    "nodeType": "ArrayTypeName",
                    "src": "12507:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5904,
                  "mutability": "mutable",
                  "name": "assetManagers",
                  "nameLocation": "12568:13:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5907,
                  "src": "12551:30:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5902,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "12551:7:29",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 5903,
                    "nodeType": "ArrayTypeName",
                    "src": "12551:9:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12471:117:29"
            },
            "returnParameters": {
              "id": 5906,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12597:0:29"
            },
            "scope": 6201,
            "src": "12448:150:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5908,
              "nodeType": "StructuredDocumentation",
              "src": "12606:91:29",
              "text": " @dev Emitted when a Pool registers tokens by calling `registerTokens`."
            },
            "id": 5919,
            "name": "TokensRegistered",
            "nameLocation": "12709:16:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5918,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5910,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "12742:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5919,
                  "src": "12726:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5909,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12726:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5914,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "12770:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5919,
                  "src": "12750:26:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5912,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5911,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "12750:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "12750:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 5913,
                    "nodeType": "ArrayTypeName",
                    "src": "12750:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5917,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "assetManagers",
                  "nameLocation": "12788:13:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5919,
                  "src": "12778:23:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5915,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "12778:7:29",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 5916,
                    "nodeType": "ArrayTypeName",
                    "src": "12778:9:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12725:77:29"
            },
            "src": "12703:100:29"
          },
          {
            "documentation": {
              "id": 5920,
              "nodeType": "StructuredDocumentation",
              "src": "12811:577:29",
              "text": " @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."
            },
            "functionSelector": "7d3aeb96",
            "id": 5929,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deregisterTokens",
            "nameLocation": "13403:16:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5927,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5922,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "13428:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5929,
                  "src": "13420:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5921,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13420:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5926,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "13463:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5929,
                  "src": "13436:33:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5924,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5923,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "13436:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "13436:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 5925,
                    "nodeType": "ArrayTypeName",
                    "src": "13436:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13419:51:29"
            },
            "returnParameters": {
              "id": 5928,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13479:0:29"
            },
            "scope": 6201,
            "src": "13394:86:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5930,
              "nodeType": "StructuredDocumentation",
              "src": "13488:95:29",
              "text": " @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
            },
            "id": 5938,
            "name": "TokensDeregistered",
            "nameLocation": "13595:18:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5937,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5932,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "13630:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5938,
                  "src": "13614:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5931,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13614:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5936,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "13658:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5938,
                  "src": "13638:26:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5934,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5933,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "13638:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "13638:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 5935,
                    "nodeType": "ArrayTypeName",
                    "src": "13638:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13613:52:29"
            },
            "src": "13589:77:29"
          },
          {
            "documentation": {
              "id": 5939,
              "nodeType": "StructuredDocumentation",
              "src": "13674:1059:29",
              "text": " @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."
            },
            "functionSelector": "b05f8e48",
            "id": 5955,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPoolTokenInfo",
            "nameLocation": "14748:16:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5941,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "14773:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5955,
                  "src": "14765:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5940,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "14765:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5944,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "14799:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5955,
                  "src": "14781:23:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "id": 5943,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5942,
                      "name": "IERC20Upgradeable",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2049,
                      "src": "14781:17:29"
                    },
                    "referencedDeclaration": 2049,
                    "src": "14781:17:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14764:41:29"
            },
            "returnParameters": {
              "id": 5954,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5947,
                  "mutability": "mutable",
                  "name": "cash",
                  "nameLocation": "14878:4:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5955,
                  "src": "14870:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5946,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14870:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5949,
                  "mutability": "mutable",
                  "name": "managed",
                  "nameLocation": "14905:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5955,
                  "src": "14897:15:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5948,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14897:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5951,
                  "mutability": "mutable",
                  "name": "lastChangeBlock",
                  "nameLocation": "14935:15:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5955,
                  "src": "14927:23:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5950,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14927:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5953,
                  "mutability": "mutable",
                  "name": "assetManager",
                  "nameLocation": "14973:12:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5955,
                  "src": "14965:20:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5952,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14965:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14855:141:29"
            },
            "scope": 6201,
            "src": "14739:258:29",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5956,
              "nodeType": "StructuredDocumentation",
              "src": "15005:841:29",
              "text": " @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."
            },
            "functionSelector": "f94d4668",
            "id": 5970,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPoolTokens",
            "nameLocation": "15861:13:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5959,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5958,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "15883:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5970,
                  "src": "15875:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5957,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "15875:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15874:16:29"
            },
            "returnParameters": {
              "id": 5969,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5963,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "15982:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5970,
                  "src": "15955:33:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5961,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 5960,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "15955:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "15955:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 5962,
                    "nodeType": "ArrayTypeName",
                    "src": "15955:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5966,
                  "mutability": "mutable",
                  "name": "balances",
                  "nameLocation": "16020:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5970,
                  "src": "16003:25:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5964,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "16003:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 5965,
                    "nodeType": "ArrayTypeName",
                    "src": "16003:9:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5968,
                  "mutability": "mutable",
                  "name": "lastChangeBlock",
                  "nameLocation": "16051:15:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5970,
                  "src": "16043:23:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5967,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16043:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15940:137:29"
            },
            "scope": 6201,
            "src": "15852:226:29",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5971,
              "nodeType": "StructuredDocumentation",
              "src": "16086:2335:29",
              "text": " @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."
            },
            "functionSelector": "b95cac28",
            "id": 5983,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "joinPool",
            "nameLocation": "18436:8:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5973,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "18463:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5983,
                  "src": "18455:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5972,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "18455:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5975,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "18488:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5983,
                  "src": "18480:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5974,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18480:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5977,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "18513:9:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5983,
                  "src": "18505:17:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5976,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18505:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5980,
                  "mutability": "mutable",
                  "name": "request",
                  "nameLocation": "18556:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 5983,
                  "src": "18533:30:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_JoinPoolRequest_$5995_memory_ptr",
                    "typeString": "struct IBeetVault.JoinPoolRequest"
                  },
                  "typeName": {
                    "id": 5979,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5978,
                      "name": "JoinPoolRequest",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5995,
                      "src": "18533:15:29"
                    },
                    "referencedDeclaration": 5995,
                    "src": "18533:15:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_JoinPoolRequest_$5995_storage_ptr",
                      "typeString": "struct IBeetVault.JoinPoolRequest"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18444:126:29"
            },
            "returnParameters": {
              "id": 5982,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18587:0:29"
            },
            "scope": 6201,
            "src": "18427:161:29",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IBeetVault.JoinPoolRequest",
            "id": 5995,
            "members": [
              {
                "constant": false,
                "id": 5987,
                "mutability": "mutable",
                "name": "assets",
                "nameLocation": "18639:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 5995,
                "src": "18630:15:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_storage_ptr",
                  "typeString": "contract IAsset[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 5985,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5984,
                      "name": "IAsset",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5644,
                      "src": "18630:6:29"
                    },
                    "referencedDeclaration": 5644,
                    "src": "18630:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAsset_$5644",
                      "typeString": "contract IAsset"
                    }
                  },
                  "id": 5986,
                  "nodeType": "ArrayTypeName",
                  "src": "18630:8:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_storage_ptr",
                    "typeString": "contract IAsset[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5990,
                "mutability": "mutable",
                "name": "maxAmountsIn",
                "nameLocation": "18666:12:29",
                "nodeType": "VariableDeclaration",
                "scope": 5995,
                "src": "18656:22:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                  "typeString": "uint256[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 5988,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18656:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5989,
                  "nodeType": "ArrayTypeName",
                  "src": "18656:9:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                    "typeString": "uint256[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5992,
                "mutability": "mutable",
                "name": "userData",
                "nameLocation": "18695:8:29",
                "nodeType": "VariableDeclaration",
                "scope": 5995,
                "src": "18689:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 5991,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "18689:5:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5994,
                "mutability": "mutable",
                "name": "fromInternalBalance",
                "nameLocation": "18719:19:29",
                "nodeType": "VariableDeclaration",
                "scope": 5995,
                "src": "18714:24:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 5993,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "18714:4:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "JoinPoolRequest",
            "nameLocation": "18603:15:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "18596:150:29",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 5996,
              "nodeType": "StructuredDocumentation",
              "src": "18754:2523:29",
              "text": " @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."
            },
            "functionSelector": "8bdb3913",
            "id": 6008,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "exitPool",
            "nameLocation": "21292:8:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6006,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5998,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "21319:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6008,
                  "src": "21311:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5997,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21311:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6000,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "21344:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6008,
                  "src": "21336:14:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5999,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21336:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6002,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "21377:9:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6008,
                  "src": "21361:25:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 6001,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21361:15:29",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6005,
                  "mutability": "mutable",
                  "name": "request",
                  "nameLocation": "21420:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6008,
                  "src": "21397:30:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ExitPoolRequest_$6020_memory_ptr",
                    "typeString": "struct IBeetVault.ExitPoolRequest"
                  },
                  "typeName": {
                    "id": 6004,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6003,
                      "name": "ExitPoolRequest",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6020,
                      "src": "21397:15:29"
                    },
                    "referencedDeclaration": 6020,
                    "src": "21397:15:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ExitPoolRequest_$6020_storage_ptr",
                      "typeString": "struct IBeetVault.ExitPoolRequest"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21300:134:29"
            },
            "returnParameters": {
              "id": 6007,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21443:0:29"
            },
            "scope": 6201,
            "src": "21283:161:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IBeetVault.ExitPoolRequest",
            "id": 6020,
            "members": [
              {
                "constant": false,
                "id": 6012,
                "mutability": "mutable",
                "name": "assets",
                "nameLocation": "21495:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6020,
                "src": "21486:15:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_storage_ptr",
                  "typeString": "contract IAsset[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 6010,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6009,
                      "name": "IAsset",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5644,
                      "src": "21486:6:29"
                    },
                    "referencedDeclaration": 5644,
                    "src": "21486:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAsset_$5644",
                      "typeString": "contract IAsset"
                    }
                  },
                  "id": 6011,
                  "nodeType": "ArrayTypeName",
                  "src": "21486:8:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_storage_ptr",
                    "typeString": "contract IAsset[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6015,
                "mutability": "mutable",
                "name": "minAmountsOut",
                "nameLocation": "21522:13:29",
                "nodeType": "VariableDeclaration",
                "scope": 6020,
                "src": "21512:23:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                  "typeString": "uint256[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 6013,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21512:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 6014,
                  "nodeType": "ArrayTypeName",
                  "src": "21512:9:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                    "typeString": "uint256[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6017,
                "mutability": "mutable",
                "name": "userData",
                "nameLocation": "21552:8:29",
                "nodeType": "VariableDeclaration",
                "scope": 6020,
                "src": "21546:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 6016,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "21546:5:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6019,
                "mutability": "mutable",
                "name": "toInternalBalance",
                "nameLocation": "21576:17:29",
                "nodeType": "VariableDeclaration",
                "scope": 6020,
                "src": "21571:22:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 6018,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "21571:4:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ExitPoolRequest",
            "nameLocation": "21459:15:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "21452:149:29",
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 6021,
              "nodeType": "StructuredDocumentation",
              "src": "21609:118:29",
              "text": " @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
            },
            "id": 6037,
            "name": "PoolBalanceChanged",
            "nameLocation": "21739:18:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6036,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6023,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "21784:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6037,
                  "src": "21768:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 6022,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21768:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6025,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "liquidityProvider",
                  "nameLocation": "21817:17:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6037,
                  "src": "21801:33:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6024,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21801:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6029,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "21865:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6037,
                  "src": "21845:26:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_memory_ptr",
                    "typeString": "contract IERC20Upgradeable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6027,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 6026,
                        "name": "IERC20Upgradeable",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2049,
                        "src": "21845:17:29"
                      },
                      "referencedDeclaration": 2049,
                      "src": "21845:17:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                        "typeString": "contract IERC20Upgradeable"
                      }
                    },
                    "id": 6028,
                    "nodeType": "ArrayTypeName",
                    "src": "21845:19:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$2049_$dyn_storage_ptr",
                      "typeString": "contract IERC20Upgradeable[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6032,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "deltas",
                  "nameLocation": "21891:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6037,
                  "src": "21882:15:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6030,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "21882:6:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 6031,
                    "nodeType": "ArrayTypeName",
                    "src": "21882:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6035,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "protocolFeeAmounts",
                  "nameLocation": "21918:18:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6037,
                  "src": "21908:28:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6033,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "21908:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 6034,
                    "nodeType": "ArrayTypeName",
                    "src": "21908:9:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21757:186:29"
            },
            "src": "21733:211:29"
          },
          {
            "canonicalName": "IBeetVault.PoolBalanceChangeKind",
            "id": 6040,
            "members": [
              {
                "id": 6038,
                "name": "JOIN",
                "nameLocation": "21990:4:29",
                "nodeType": "EnumValue",
                "src": "21990:4:29"
              },
              {
                "id": 6039,
                "name": "EXIT",
                "nameLocation": "22005:4:29",
                "nodeType": "EnumValue",
                "src": "22005:4:29"
              }
            ],
            "name": "PoolBalanceChangeKind",
            "nameLocation": "21957:21:29",
            "nodeType": "EnumDefinition",
            "src": "21952:64:29"
          },
          {
            "canonicalName": "IBeetVault.SwapKind",
            "id": 6043,
            "members": [
              {
                "id": 6041,
                "name": "GIVEN_IN",
                "nameLocation": "25675:8:29",
                "nodeType": "EnumValue",
                "src": "25675:8:29"
              },
              {
                "id": 6042,
                "name": "GIVEN_OUT",
                "nameLocation": "25694:9:29",
                "nodeType": "EnumValue",
                "src": "25694:9:29"
              }
            ],
            "name": "SwapKind",
            "nameLocation": "25655:8:29",
            "nodeType": "EnumDefinition",
            "src": "25650:60:29"
          },
          {
            "documentation": {
              "id": 6044,
              "nodeType": "StructuredDocumentation",
              "src": "25718:599:29",
              "text": " @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."
            },
            "functionSelector": "52bbbe29",
            "id": 6059,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swap",
            "nameLocation": "26332:4:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6055,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6047,
                  "mutability": "mutable",
                  "name": "singleSwap",
                  "nameLocation": "26365:10:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6059,
                  "src": "26347:28:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SingleSwap_$6075_memory_ptr",
                    "typeString": "struct IBeetVault.SingleSwap"
                  },
                  "typeName": {
                    "id": 6046,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6045,
                      "name": "SingleSwap",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6075,
                      "src": "26347:10:29"
                    },
                    "referencedDeclaration": 6075,
                    "src": "26347:10:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SingleSwap_$6075_storage_ptr",
                      "typeString": "struct IBeetVault.SingleSwap"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6050,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "26408:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6059,
                  "src": "26386:27:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$6136_memory_ptr",
                    "typeString": "struct IBeetVault.FundManagement"
                  },
                  "typeName": {
                    "id": 6049,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6048,
                      "name": "FundManagement",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6136,
                      "src": "26386:14:29"
                    },
                    "referencedDeclaration": 6136,
                    "src": "26386:14:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$6136_storage_ptr",
                      "typeString": "struct IBeetVault.FundManagement"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6052,
                  "mutability": "mutable",
                  "name": "limit",
                  "nameLocation": "26432:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6059,
                  "src": "26424:13:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6051,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26424:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6054,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "26456:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6059,
                  "src": "26448:16:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6053,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26448:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26336:135:29"
            },
            "returnParameters": {
              "id": 6058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6057,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6059,
                  "src": "26498:7:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6056,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26498:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26497:9:29"
            },
            "scope": 6201,
            "src": "26323:184:29",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IBeetVault.SingleSwap",
            "id": 6075,
            "members": [
              {
                "constant": false,
                "id": 6061,
                "mutability": "mutable",
                "name": "poolId",
                "nameLocation": "27112:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6075,
                "src": "27104:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 6060,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "27104:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6064,
                "mutability": "mutable",
                "name": "kind",
                "nameLocation": "27138:4:29",
                "nodeType": "VariableDeclaration",
                "scope": 6075,
                "src": "27129:13:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_SwapKind_$6043",
                  "typeString": "enum IBeetVault.SwapKind"
                },
                "typeName": {
                  "id": 6063,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 6062,
                    "name": "SwapKind",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 6043,
                    "src": "27129:8:29"
                  },
                  "referencedDeclaration": 6043,
                  "src": "27129:8:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_SwapKind_$6043",
                    "typeString": "enum IBeetVault.SwapKind"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6067,
                "mutability": "mutable",
                "name": "assetIn",
                "nameLocation": "27160:7:29",
                "nodeType": "VariableDeclaration",
                "scope": 6075,
                "src": "27153:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IAsset_$5644",
                  "typeString": "contract IAsset"
                },
                "typeName": {
                  "id": 6066,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 6065,
                    "name": "IAsset",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 5644,
                    "src": "27153:6:29"
                  },
                  "referencedDeclaration": 5644,
                  "src": "27153:6:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAsset_$5644",
                    "typeString": "contract IAsset"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6070,
                "mutability": "mutable",
                "name": "assetOut",
                "nameLocation": "27185:8:29",
                "nodeType": "VariableDeclaration",
                "scope": 6075,
                "src": "27178:15:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IAsset_$5644",
                  "typeString": "contract IAsset"
                },
                "typeName": {
                  "id": 6069,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 6068,
                    "name": "IAsset",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 5644,
                    "src": "27178:6:29"
                  },
                  "referencedDeclaration": 5644,
                  "src": "27178:6:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAsset_$5644",
                    "typeString": "contract IAsset"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6072,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "27212:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6075,
                "src": "27204:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6071,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "27204:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6074,
                "mutability": "mutable",
                "name": "userData",
                "nameLocation": "27235:8:29",
                "nodeType": "VariableDeclaration",
                "scope": 6075,
                "src": "27229:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 6073,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "27229:5:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "SingleSwap",
            "nameLocation": "27082:10:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "27075:176:29",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 6076,
              "nodeType": "StructuredDocumentation",
              "src": "27259:2008:29",
              "text": " @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."
            },
            "functionSelector": "945bcec9",
            "id": 6101,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "batchSwap",
            "nameLocation": "29282:9:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6079,
                  "mutability": "mutable",
                  "name": "kind",
                  "nameLocation": "29311:4:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29302:13:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_SwapKind_$6043",
                    "typeString": "enum IBeetVault.SwapKind"
                  },
                  "typeName": {
                    "id": 6078,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6077,
                      "name": "SwapKind",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6043,
                      "src": "29302:8:29"
                    },
                    "referencedDeclaration": 6043,
                    "src": "29302:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_SwapKind_$6043",
                      "typeString": "enum IBeetVault.SwapKind"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6083,
                  "mutability": "mutable",
                  "name": "swaps",
                  "nameLocation": "29349:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29326:28:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$6112_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IBeetVault.BatchSwapStep[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6081,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 6080,
                        "name": "BatchSwapStep",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 6112,
                        "src": "29326:13:29"
                      },
                      "referencedDeclaration": 6112,
                      "src": "29326:13:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BatchSwapStep_$6112_storage_ptr",
                        "typeString": "struct IBeetVault.BatchSwapStep"
                      }
                    },
                    "id": 6082,
                    "nodeType": "ArrayTypeName",
                    "src": "29326:15:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$6112_storage_$dyn_storage_ptr",
                      "typeString": "struct IBeetVault.BatchSwapStep[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6087,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "29381:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29365:22:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_memory_ptr",
                    "typeString": "contract IAsset[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6085,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 6084,
                        "name": "IAsset",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5644,
                        "src": "29365:6:29"
                      },
                      "referencedDeclaration": 5644,
                      "src": "29365:6:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IAsset_$5644",
                        "typeString": "contract IAsset"
                      }
                    },
                    "id": 6086,
                    "nodeType": "ArrayTypeName",
                    "src": "29365:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_storage_ptr",
                      "typeString": "contract IAsset[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6090,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "29420:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29398:27:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$6136_memory_ptr",
                    "typeString": "struct IBeetVault.FundManagement"
                  },
                  "typeName": {
                    "id": 6089,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6088,
                      "name": "FundManagement",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6136,
                      "src": "29398:14:29"
                    },
                    "referencedDeclaration": 6136,
                    "src": "29398:14:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$6136_storage_ptr",
                      "typeString": "struct IBeetVault.FundManagement"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6093,
                  "mutability": "mutable",
                  "name": "limits",
                  "nameLocation": "29452:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29436:22:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6091,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "29436:6:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 6092,
                    "nodeType": "ArrayTypeName",
                    "src": "29436:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6095,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "29477:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29469:16:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29469:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "29291:201:29"
            },
            "returnParameters": {
              "id": 6100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6099,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6101,
                  "src": "29519:15:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6097,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "29519:6:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 6098,
                    "nodeType": "ArrayTypeName",
                    "src": "29519:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "29518:17:29"
            },
            "scope": 6201,
            "src": "29273:263:29",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IBeetVault.BatchSwapStep",
            "id": 6112,
            "members": [
              {
                "constant": false,
                "id": 6103,
                "mutability": "mutable",
                "name": "poolId",
                "nameLocation": "30150:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6112,
                "src": "30142:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 6102,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "30142:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6105,
                "mutability": "mutable",
                "name": "assetInIndex",
                "nameLocation": "30175:12:29",
                "nodeType": "VariableDeclaration",
                "scope": 6112,
                "src": "30167:20:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6104,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "30167:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6107,
                "mutability": "mutable",
                "name": "assetOutIndex",
                "nameLocation": "30206:13:29",
                "nodeType": "VariableDeclaration",
                "scope": 6112,
                "src": "30198:21:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6106,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "30198:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6109,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "30238:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6112,
                "src": "30230:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6108,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "30230:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6111,
                "mutability": "mutable",
                "name": "userData",
                "nameLocation": "30261:8:29",
                "nodeType": "VariableDeclaration",
                "scope": 6112,
                "src": "30255:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 6110,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "30255:5:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "BatchSwapStep",
            "nameLocation": "30117:13:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "30110:167:29",
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 6113,
              "nodeType": "StructuredDocumentation",
              "src": "30285:94:29",
              "text": " @dev Emitted for each individual swap performed by `swap` or `batchSwap`."
            },
            "id": 6127,
            "name": "Swap",
            "nameLocation": "30391:4:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6115,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "30422:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6127,
                  "src": "30406:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 6114,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "30406:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6118,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenIn",
                  "nameLocation": "30465:7:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6127,
                  "src": "30439:33:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "id": 6117,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6116,
                      "name": "IERC20Upgradeable",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2049,
                      "src": "30439:17:29"
                    },
                    "referencedDeclaration": 2049,
                    "src": "30439:17:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6121,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenOut",
                  "nameLocation": "30509:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6127,
                  "src": "30483:34:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "id": 6120,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6119,
                      "name": "IERC20Upgradeable",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2049,
                      "src": "30483:17:29"
                    },
                    "referencedDeclaration": 2049,
                    "src": "30483:17:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6123,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amountIn",
                  "nameLocation": "30536:8:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6127,
                  "src": "30528:16:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30528:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6125,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amountOut",
                  "nameLocation": "30563:9:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6127,
                  "src": "30555:17:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6124,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30555:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "30395:184:29"
            },
            "src": "30385:195:29"
          },
          {
            "canonicalName": "IBeetVault.FundManagement",
            "id": 6136,
            "members": [
              {
                "constant": false,
                "id": 6129,
                "mutability": "mutable",
                "name": "sender",
                "nameLocation": "31571:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6136,
                "src": "31563:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 6128,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "31563:7:29",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6131,
                "mutability": "mutable",
                "name": "fromInternalBalance",
                "nameLocation": "31593:19:29",
                "nodeType": "VariableDeclaration",
                "scope": 6136,
                "src": "31588:24:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 6130,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "31588:4:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6133,
                "mutability": "mutable",
                "name": "recipient",
                "nameLocation": "31639:9:29",
                "nodeType": "VariableDeclaration",
                "scope": 6136,
                "src": "31623:25:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                },
                "typeName": {
                  "id": 6132,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "31623:15:29",
                  "stateMutability": "payable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6135,
                "mutability": "mutable",
                "name": "toInternalBalance",
                "nameLocation": "31664:17:29",
                "nodeType": "VariableDeclaration",
                "scope": 6136,
                "src": "31659:22:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 6134,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "31659:4:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "FundManagement",
            "nameLocation": "31537:14:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "31530:159:29",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 6137,
              "nodeType": "StructuredDocumentation",
              "src": "31697:1041:29",
              "text": " @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."
            },
            "functionSelector": "f84d066e",
            "id": 6157,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "queryBatchSwap",
            "nameLocation": "32753:14:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6152,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6140,
                  "mutability": "mutable",
                  "name": "kind",
                  "nameLocation": "32787:4:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6157,
                  "src": "32778:13:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_SwapKind_$6043",
                    "typeString": "enum IBeetVault.SwapKind"
                  },
                  "typeName": {
                    "id": 6139,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6138,
                      "name": "SwapKind",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6043,
                      "src": "32778:8:29"
                    },
                    "referencedDeclaration": 6043,
                    "src": "32778:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_SwapKind_$6043",
                      "typeString": "enum IBeetVault.SwapKind"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6144,
                  "mutability": "mutable",
                  "name": "swaps",
                  "nameLocation": "32825:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6157,
                  "src": "32802:28:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$6112_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IBeetVault.BatchSwapStep[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6142,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 6141,
                        "name": "BatchSwapStep",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 6112,
                        "src": "32802:13:29"
                      },
                      "referencedDeclaration": 6112,
                      "src": "32802:13:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BatchSwapStep_$6112_storage_ptr",
                        "typeString": "struct IBeetVault.BatchSwapStep"
                      }
                    },
                    "id": 6143,
                    "nodeType": "ArrayTypeName",
                    "src": "32802:15:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$6112_storage_$dyn_storage_ptr",
                      "typeString": "struct IBeetVault.BatchSwapStep[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6148,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "32857:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6157,
                  "src": "32841:22:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_memory_ptr",
                    "typeString": "contract IAsset[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6146,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 6145,
                        "name": "IAsset",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5644,
                        "src": "32841:6:29"
                      },
                      "referencedDeclaration": 5644,
                      "src": "32841:6:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IAsset_$5644",
                        "typeString": "contract IAsset"
                      }
                    },
                    "id": 6147,
                    "nodeType": "ArrayTypeName",
                    "src": "32841:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IAsset_$5644_$dyn_storage_ptr",
                      "typeString": "contract IAsset[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6151,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "32896:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6157,
                  "src": "32874:27:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$6136_memory_ptr",
                    "typeString": "struct IBeetVault.FundManagement"
                  },
                  "typeName": {
                    "id": 6150,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6149,
                      "name": "FundManagement",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6136,
                      "src": "32874:14:29"
                    },
                    "referencedDeclaration": 6136,
                    "src": "32874:14:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$6136_storage_ptr",
                      "typeString": "struct IBeetVault.FundManagement"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "32767:141:29"
            },
            "returnParameters": {
              "id": 6156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6155,
                  "mutability": "mutable",
                  "name": "assetDeltas",
                  "nameLocation": "32943:11:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6157,
                  "src": "32927:27:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6153,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "32927:6:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 6154,
                    "nodeType": "ArrayTypeName",
                    "src": "32927:8:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "32926:29:29"
            },
            "scope": 6201,
            "src": "32744:212:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 6158,
              "nodeType": "StructuredDocumentation",
              "src": "33968:441:29",
              "text": " @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
            },
            "functionSelector": "e6c46092",
            "id": 6165,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "managePoolBalance",
            "nameLocation": "34424:17:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6162,
                  "mutability": "mutable",
                  "name": "ops",
                  "nameLocation": "34465:3:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6165,
                  "src": "34442:26:29",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$6176_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IBeetVault.PoolBalanceOp[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6160,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 6159,
                        "name": "PoolBalanceOp",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 6176,
                        "src": "34442:13:29"
                      },
                      "referencedDeclaration": 6176,
                      "src": "34442:13:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PoolBalanceOp_$6176_storage_ptr",
                        "typeString": "struct IBeetVault.PoolBalanceOp"
                      }
                    },
                    "id": 6161,
                    "nodeType": "ArrayTypeName",
                    "src": "34442:15:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$6176_storage_$dyn_storage_ptr",
                      "typeString": "struct IBeetVault.PoolBalanceOp[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "34441:28:29"
            },
            "returnParameters": {
              "id": 6164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "34478:0:29"
            },
            "scope": 6201,
            "src": "34415:64:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IBeetVault.PoolBalanceOp",
            "id": 6176,
            "members": [
              {
                "constant": false,
                "id": 6168,
                "mutability": "mutable",
                "name": "kind",
                "nameLocation": "34537:4:29",
                "nodeType": "VariableDeclaration",
                "scope": 6176,
                "src": "34519:22:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_PoolBalanceOpKind_$6180",
                  "typeString": "enum IBeetVault.PoolBalanceOpKind"
                },
                "typeName": {
                  "id": 6167,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 6166,
                    "name": "PoolBalanceOpKind",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 6180,
                    "src": "34519:17:29"
                  },
                  "referencedDeclaration": 6180,
                  "src": "34519:17:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PoolBalanceOpKind_$6180",
                    "typeString": "enum IBeetVault.PoolBalanceOpKind"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6170,
                "mutability": "mutable",
                "name": "poolId",
                "nameLocation": "34560:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6176,
                "src": "34552:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 6169,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "34552:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6173,
                "mutability": "mutable",
                "name": "token",
                "nameLocation": "34595:5:29",
                "nodeType": "VariableDeclaration",
                "scope": 6176,
                "src": "34577:23:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                  "typeString": "contract IERC20Upgradeable"
                },
                "typeName": {
                  "id": 6172,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 6171,
                    "name": "IERC20Upgradeable",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2049,
                    "src": "34577:17:29"
                  },
                  "referencedDeclaration": 2049,
                  "src": "34577:17:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6175,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "34619:6:29",
                "nodeType": "VariableDeclaration",
                "scope": 6176,
                "src": "34611:14:29",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6174,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "34611:7:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "PoolBalanceOp",
            "nameLocation": "34494:13:29",
            "nodeType": "StructDefinition",
            "scope": 6201,
            "src": "34487:146:29",
            "visibility": "public"
          },
          {
            "canonicalName": "IBeetVault.PoolBalanceOpKind",
            "id": 6180,
            "members": [
              {
                "id": 6177,
                "name": "WITHDRAW",
                "nameLocation": "35174:8:29",
                "nodeType": "EnumValue",
                "src": "35174:8:29"
              },
              {
                "id": 6178,
                "name": "DEPOSIT",
                "nameLocation": "35193:7:29",
                "nodeType": "EnumValue",
                "src": "35193:7:29"
              },
              {
                "id": 6179,
                "name": "UPDATE",
                "nameLocation": "35211:6:29",
                "nodeType": "EnumValue",
                "src": "35211:6:29"
              }
            ],
            "name": "PoolBalanceOpKind",
            "nameLocation": "35145:17:29",
            "nodeType": "EnumDefinition",
            "src": "35140:84:29"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 6181,
              "nodeType": "StructuredDocumentation",
              "src": "35232:111:29",
              "text": " @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
            },
            "id": 6194,
            "name": "PoolBalanceManaged",
            "nameLocation": "35355:18:29",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6183,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "35400:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6194,
                  "src": "35384:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 6182,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "35384:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6185,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "assetManager",
                  "nameLocation": "35433:12:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6194,
                  "src": "35417:28:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6184,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "35417:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6188,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "35482:5:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6194,
                  "src": "35456:31:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "id": 6187,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6186,
                      "name": "IERC20Upgradeable",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2049,
                      "src": "35456:17:29"
                    },
                    "referencedDeclaration": 2049,
                    "src": "35456:17:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2049",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6190,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "cashDelta",
                  "nameLocation": "35505:9:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6194,
                  "src": "35498:16:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 6189,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35498:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6192,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "managedDelta",
                  "nameLocation": "35532:12:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6194,
                  "src": "35525:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 6191,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35525:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "35373:178:29"
            },
            "src": "35349:203:29"
          },
          {
            "documentation": {
              "id": 6195,
              "nodeType": "StructuredDocumentation",
              "src": "36446:649:29",
              "text": " @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."
            },
            "functionSelector": "16c38b3c",
            "id": 6200,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaused",
            "nameLocation": "37110:9:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6198,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6197,
                  "mutability": "mutable",
                  "name": "paused",
                  "nameLocation": "37125:6:29",
                  "nodeType": "VariableDeclaration",
                  "scope": 6200,
                  "src": "37120:11:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6196,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "37120:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "37119:13:29"
            },
            "returnParameters": {
              "id": 6199,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "37141:0:29"
            },
            "scope": 6201,
            "src": "37101:41:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 6202,
        "src": "273:36940:29",
        "usedErrors": []
      }
    ],
    "src": "35:37178:29"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-05-19T10:45:51.002Z",
  "devdoc": {
    "events": {
      "AuthorizerChanged(address)": {
        "details": "Emitted when a new authorizer is set by `setAuthorizer`."
      },
      "ExternalBalanceTransfer(address,address,address,uint256)": {
        "details": "Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
      },
      "InternalBalanceChanged(address,address,int256)": {
        "details": "Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address."
      },
      "PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])": {
        "details": "Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
      },
      "PoolBalanceManaged(bytes32,address,address,int256,int256)": {
        "details": "Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
      },
      "PoolRegistered(bytes32,address,uint8)": {
        "details": "Emitted when a Pool is registered by calling `registerPool`."
      },
      "RelayerApprovalChanged(address,address,bool)": {
        "details": "Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
      },
      "Swap(bytes32,address,address,uint256,uint256)": {
        "details": "Emitted for each individual swap performed by `swap` or `batchSwap`."
      },
      "TokensDeregistered(bytes32,address[])": {
        "details": "Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
      },
      "TokensRegistered(bytes32,address[],address[])": {
        "details": "Emitted when a Pool registers tokens by calling `registerTokens`."
      }
    },
    "kind": "dev",
    "methods": {
      "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": {
        "details": "Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."
      },
      "deregisterTokens(bytes32,address[])": {
        "details": "Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event."
      },
      "exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
        "details": "Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event."
      },
      "getAuthorizer()": {
        "details": "Returns the Vault's Authorizer."
      },
      "getDomainSeparator()": {
        "details": "Returns the EIP712 domain separator."
      },
      "getInternalBalance(address,address[])": {
        "details": "Returns `user`'s Internal Balance for a set of tokens."
      },
      "getNextNonce(address)": {
        "details": "Returns the next nonce used by an address to sign messages."
      },
      "getPausedState()": {
        "details": "Returns the current paused state."
      },
      "getPool(bytes32)": {
        "details": "Returns a Pool's contract address and specialization setting."
      },
      "getPoolTokenInfo(bytes32,address)": {
        "details": "Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager."
      },
      "getPoolTokens(bytes32)": {
        "details": "Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."
      },
      "hasApprovedRelayer(address,address)": {
        "details": "Returns true if `user` has approved `relayer` to act as a relayer for them."
      },
      "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
        "details": "Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."
      },
      "managePoolBalance((uint8,bytes32,address,uint256)[])": {
        "details": "Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
      },
      "manageUserBalance((uint8,address,uint256,address,address)[])": {
        "details": "Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
      },
      "queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": {
        "details": "Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction."
      },
      "registerPool(uint8)": {
        "details": "Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event."
      },
      "registerTokens(bytes32,address[],address[])": {
        "details": "Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event."
      },
      "setAuthorizer(address)": {
        "details": "Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."
      },
      "setPaused(bool)": {
        "details": "Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited."
      },
      "setRelayerApproval(address,address,bool)": {
        "details": "Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event."
      },
      "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": {
        "details": "Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}